name: notification-ui

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  tag:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.push_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Git config
        run: |
          git config --global user.name "$(git log -1 --pretty='%an')"
          git config --global user.email "$(git log -1 --pretty='%ae')"

      - name: Bump and push tag
        id: push_tag
        run: |
          set -eo pipefail
          git fetch --tags

          LATEST=$(git tag --list "master-v*" --sort=-v:refname | head -n1 || true)

          if [ -z "$LATEST" ]; then
            NEW_TAG="master-v1.0.0"
          else
            VERSION=${LATEST#master-v}
            if [[ ! $VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              echo "Error: Invalid tag format for $LATEST" >&2
              exit 1
            fi
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            PATCH=$((PATCH + 1))
            NEW_TAG="master-v$MAJOR.$MINOR.$PATCH"
          fi

          if git ls-remote --tags origin | grep -q "refs/tags/$NEW_TAG"; then
            echo "Error: Tag $NEW_TAG already exists" >&2
            exit 1
          fi

          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
          echo "new_tag=$NEW_TAG" >> "$GITHUB_OUTPUT"

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [tag]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit author email
        id: get_author
        run: |
          AUTHOR_EMAIL=$(git log -1 --pretty='%ae')
          echo "author_email=$AUTHOR_EMAIL" >> "$GITHUB_OUTPUT"

      - name: Fetch Secrets from Vault
        uses: hashicorp/vault-action@v3.3.0
        with:
          url: https://vault.shauryatechnosoft.com
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            kv/data/stpl MICROSOFT_TEAMS_WEBHOOK_URL | MICROSOFT_TEAMS_WEBHOOK_URL ;
            kv/data/stpl EMAIL_PASSWORD | EMAIL_PASSWORD ;
            kv/data/stpl SONAR_TOKEN | SONAR_TOKEN ;
            kv/data/stpl GIT_TOKEN | GIT_TOKEN ;
            kv/data/stpl HARBOR_PASSWORD | HARBOR_PASSWORD ;

      - name: SonarQube scan
        uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarqube.shauryatechnosoft.com
        continue-on-error: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Dependencies
        run: make install

      - name: Build React App
        run: make build

      - name: Verify build output
        run: ls -al

      - name: Upload Website Files
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 1

      - name: Log in to Docker registry
        if: env.HARBOR_PASSWORD != ''
        uses: docker/login-action@v3
        with:
          registry: reg.shauryatechnosoft.com
          username: admin
          password: ${{ env.HARBOR_PASSWORD }}

      - name: Build and push Docker image
        if: env.HARBOR_PASSWORD != ''
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            reg.shauryatechnosoft.com/notification/ui:latest
            reg.shauryatechnosoft.com/notification/ui:${{ needs.tag.outputs.new_tag }}
          no-cache: true

      - name: Checkout platform-helm repo
        uses: actions/checkout@v4
        with:
          repository: STPL/platform-helm
          token: ${{ env.GIT_TOKEN }}
          path: platform-helm

      - name: Update Helm values with new tag
        run: |
          sed -i "s|\(tag: \).*|\1\"${{ needs.tag.outputs.new_tag }}\"|" platform-helm/charts/notification-ui/values.yaml
          cat platform-helm/charts/notification-ui/values.yaml | grep tag  # Verify

      - name: Commit updated values
        run: |
          cd platform-helm
          git config --global user.name "$(git log -1 --pretty='%an')"
          git config --global user.email "$(git log -1 --pretty='%ae')"
          git add charts/notification-ui/values.yaml
          git commit -m "Update values.yaml tag to ${{ needs.tag.outputs.new_tag }}" || echo "No changes to commit"
          git push origin main

      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@v1.0.8
        if: always()
        with:
          webhook_url: ${{ env.MICROSOFT_TEAMS_WEBHOOK_URL }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          overwrite: |
            {
              "title": "Build #${{ github.run_number }} Completed for ${{ github.repository }} on branch ${{ github.ref_name }}",
              "text": "The deployment process for ${{ needs.tag.outputs.new_tag }} has successfully finished!."
            }

      - name: Send email notification
        uses: dawidd6/action-send-mail@v6
        continue-on-error: true
        if: always()
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: alerts@shauryatechnosoft.com
          password: ${{ env.EMAIL_PASSWORD }}
          subject: "Build ${{ github.run_number }} for ${{ github.repository }} - ${{ needs.tag.outputs.new_tag }} - ${{ job.status }}"
          to: ${{ steps.get_author.outputs.author_email }}
          cc: ${{ job.status == 'failure' && format('{0},{1},{2}', 'umesh.pawar@shauryatechnosoft.com', 'radhakishan.surwase@shauryatechnosoft.com', 'vaibhav.jadhav@shauryatechnosoft.com') || '' }}
          from: Gitea CI/CD <alerts@shauryatechnosoft.com>
          body: |
            üõ†Ô∏è Deployment Report
            
            üìå Repository     : ${{ github.repository }}
            üåø Branch         : ${{ github.ref_name }}
            üÜï Version        : ${{ needs.tag.outputs.new_tag }}
            üîß Triggered By   : ${{ github.actor }}
            üìß Author Email   : ${{ steps.get_author.outputs.author_email }}
            üî¢ Run Number     : ${{ github.run_number }}
            üïí Timestamp      : ${{ github.event.head_commit.timestamp }}
            üì§ Status         : ${{ job.status }}
            üîó GitHub Actions : https://git.shauryatechnosoft.com/${{ github.repository }}/actions/runs/${{ github.run_number }}

            ${{ job.status == 'success' && '‚úÖ Deployment to staging via SCP and artifact upload completed successfully.' || '‚ùå Build failed or was cancelled. Please review the logs.' }}

            ---
            üîí This is an automated message from GitHub Actions.
